const { db } = require("../config/database");

// Helper function ƒë·ªÉ x√°c ƒë·ªãnh building_id
function getTargetBuildingId(req) {
  let targetBuildingId = 'building_id_1'; // m·∫∑c ƒë·ªãnh T√≤a nh√† A
  
  if (req.session.admin) {
    if (req.session.admin.role === 'admin') {
      // Admin th∆∞·ªùng: l·∫•y building_ids (l√† string, kh√¥ng ph·∫£i array)
      targetBuildingId = req.session.admin.building_ids || 'building_id_1';
    } else if (req.session.admin.role === 'super_admin' && req.session.selectedBuildingId) {
      // Super admin: l·∫•y theo dropdown ƒë√£ ch·ªçn
      targetBuildingId = req.session.selectedBuildingId;
    }
  }
  
  return targetBuildingId;
}

const getSettings = async (req, res) => {
  try {
    const targetBuildingId = getTargetBuildingId(req);
    const buildings = {
      building_id_1: { name: "T√≤a nh√† A" },
      building_id_2: { name: "T√≤a nh√† B" }
    };

    // L·∫•y d·ªØ li·ªáu building t·ª´ Firebase
    const buildingSnapshot = await db.ref(`buildings/${targetBuildingId}`).once("value");
    const buildingData = buildingSnapshot.val() || {};

    // L·∫•y calibration data t·ª´ Firebase nodes
    const roomsSnapshot = await db.ref(`buildings/${targetBuildingId}/rooms`).once("value");
    const roomsData = roomsSnapshot.val() || {};

    // Chu·∫©n b·ªã danh s√°ch rooms cho dropdown
    const roomsList = Object.entries(roomsData).map(([roomId, roomData]) => ({
      id: roomId,
      name: `Ph√≤ng ${roomId}`,
      hasElectricity: roomData.nodes && Object.values(roomData.nodes).some(node => node.type === 'electricity'),
      hasWater: roomData.nodes && Object.values(roomData.nodes).some(node => node.type === 'water')
    }));

    // T√¨m nodes ƒëi·ªán v√† n∆∞·ªõc ƒë·ªÉ l·∫•y calibration data (l·∫•y t·ª´ ph√≤ng ƒë·∫ßu ti√™n c√≥ nodes)
    let electricityCalibration = { sensorValue: 0, actualValue: 0, calibrationFactor: 1.0, calibratedAt: null };
    let waterCalibration = { sensorValue: 0, actualValue: 0, calibrationFactor: 1.0, calibratedAt: null };

    // ∆Øu ti√™n l·∫•y t·ª´ ph√≤ng ƒë·∫ßu ti√™n c√≥ nodes
    const roomsWithNodes = roomsList.filter(room => room.hasElectricity || room.hasWater);
    const firstRoomWithNodes = roomsWithNodes[0];
    
    if (firstRoomWithNodes && roomsData[firstRoomWithNodes.id] && roomsData[firstRoomWithNodes.id].nodes) {
      Object.values(roomsData[firstRoomWithNodes.id].nodes).forEach(node => {
        if (node.type === 'electricity' && node.calibration) {
          electricityCalibration = node.calibration;
        } else if (node.type === 'water' && node.calibration) {
          waterCalibration = node.calibration;
        }
      });
    }

    // L·∫•y gi√° ƒëi·ªán, gi√° n∆∞·ªõc v√† ng√†y c·∫≠p nh·∫≠t t·ª´ Firebase
    const currentSettings = {
      electricityPrice: buildingData.price_electric || 3000,
      waterPrice: buildingData.price_water || 15000,
      electricityUpdatedAt: buildingData.price_electric_updated_at || null,
      waterUpdatedAt: buildingData.price_water_updated_at || null,
      calibrationData: {
        electricity: electricityCalibration,
        water: waterCalibration
      },
      rooms: roomsList
    };

    console.log('Current pricing data:', {
      electricityPrice: currentSettings.electricityPrice,
      waterPrice: currentSettings.waterPrice,
      electricityUpdatedAt: currentSettings.electricityUpdatedAt,
      waterUpdatedAt: currentSettings.waterUpdatedAt
    });

    res.render("settings", {
      currentPage: "settings",
      admin: req.session.admin,
      buildings: req.session.admin?.role === 'super_admin' ? buildings : null,
      selectedBuildingId: targetBuildingId,
      currentSettings: currentSettings,
      targetBuildingId: targetBuildingId
    });

  } catch (error) {
    console.error("Error loading settings:", error);
    res.status(500).render("error", { 
      error: "L·ªói khi t·∫£i trang c√†i ƒë·∫∑t: " + error.message 
    });
  }
};

// API ƒë·ªÉ c·∫≠p nh·∫≠t calibration
const updateCalibration = async (req, res) => {
  try {
    const { type, sensorValue, actualValue } = req.body;
    const targetBuildingId = getTargetBuildingId(req);

    // Validation
    if (!type || !['electricity', 'water'].includes(type)) {
      return res.status(400).json({
        success: false,
        error: "Lo·∫°i c·∫£m bi·∫øn kh√¥ng h·ª£p l·ªá"
      });
    }

    if (typeof sensorValue !== 'number' || typeof actualValue !== 'number') {
      return res.status(400).json({
        success: false,
        error: "Gi√° tr·ªã s·ªë kh√¥ng h·ª£p l·ªá"
      });
    }

    if (sensorValue <= 0 || actualValue <= 0) {
      return res.status(400).json({
        success: false,
        error: "Gi√° tr·ªã ph·∫£i l·ªõn h∆°n 0"
      });
    }

    const { roomId } = req.body;

    // Validation cho roomId
    if (!roomId) {
      return res.status(400).json({
        success: false,
        error: "Vui l√≤ng ch·ªçn ph√≤ng"
      });
    }

    // T√≠nh to√°n calibration factor
    const calibrationFactor = actualValue / sensorValue;

    // L·∫•y d·ªØ li·ªáu room c·ª• th·ªÉ
    const roomSnapshot = await db.ref(`buildings/${targetBuildingId}/rooms/${roomId}`).once("value");
    const roomData = roomSnapshot.val();

    if (!roomData) {
      return res.status(400).json({
        success: false,
        error: "Ph√≤ng kh√¥ng t·ªìn t·∫°i"
      });
    }

    // T√¨m v√† c·∫≠p nh·∫≠t nodes c·ªßa type t∆∞∆°ng ·ª©ng trong ph√≤ng n√†y
    let updatedCount = 0;
    const calibrationData = {
      sensorValue,
      actualValue,
      calibrationFactor: parseFloat(calibrationFactor.toFixed(4)),
      calibratedAt: Date.now()
    };

    if (roomData.nodes) {
      for (const [nodeId, node] of Object.entries(roomData.nodes)) {
        if (node.type === type) {
          // C·∫≠p nh·∫≠t calibration data cho node n√†y
          await db.ref(`buildings/${targetBuildingId}/rooms/${roomId}/nodes/${nodeId}/calibration`).set(calibrationData);
          updatedCount++;
        }
      }
    }

    console.log(`üìä Calibration updated for ${targetBuildingId} room ${roomId}:`, {
      type,
      sensorValue,
      actualValue,
      calibrationFactor,
      nodesUpdated: updatedCount
    });

    res.json({
      success: true,
      message: `ƒê√£ c·∫≠p nh·∫≠t calibration ${type === 'electricity' ? 'ƒëi·ªán' : 'n∆∞·ªõc'} cho ph√≤ng ${roomId} (${updatedCount} node)`,
      data: {
        type,
        roomId,
        sensorValue,
        actualValue,
        calibrationFactor: parseFloat(calibrationFactor.toFixed(4)),
        nodesUpdated: updatedCount
      }
    });

  } catch (error) {
    console.error("Error updating calibration:", error);
    res.status(500).json({
      success: false,
      error: "L·ªói khi c·∫≠p nh·∫≠t calibration: " + error.message
    });
  }
};

// API ƒë·ªÉ c·∫≠p nh·∫≠t gi√°
const updatePricing = async (req, res) => {
  try {
    const { electricityPrice, waterPrice } = req.body;
    const targetBuildingId = getTargetBuildingId(req);

    // Validation
    if (typeof electricityPrice !== 'number' || typeof waterPrice !== 'number') {
      return res.status(400).json({
        success: false,
        error: "Gi√° tr·ªã kh√¥ng h·ª£p l·ªá"
      });
    }

    if (electricityPrice <= 0 || waterPrice <= 0) {
      return res.status(400).json({
        success: false,
        error: "Gi√° ph·∫£i l·ªõn h∆°n 0"
      });
    }

    // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
    const buildingSnapshot = await db.ref(`buildings/${targetBuildingId}`).once("value");
    const buildingData = buildingSnapshot.val() || {};
    
    // L·∫•y gi√° v√† th·ªùi gian hi·ªán t·∫°i
    const currentElectricityPrice = buildingData.price_electric || 0;
    const currentWaterPrice = buildingData.price_water || 0;
    const currentElectricityUpdatedAt = buildingData.price_electric_updated_at || null;
    const currentWaterUpdatedAt = buildingData.price_water_updated_at || null;
    
    const updatedAt = Date.now();
    const updates = {};
    
    // Ch·ªâ c·∫≠p nh·∫≠t timestamp cho gi√° ƒëi·ªán n·∫øu gi√° ƒëi·ªán thay ƒë·ªïi
    updates[`buildings/${targetBuildingId}/price_electric`] = electricityPrice;
    if (electricityPrice !== currentElectricityPrice) {
      updates[`buildings/${targetBuildingId}/price_electric_updated_at`] = updatedAt;
    }
    
    // Ch·ªâ c·∫≠p nh·∫≠t timestamp cho gi√° n∆∞·ªõc n·∫øu gi√° n∆∞·ªõc thay ƒë·ªïi
    updates[`buildings/${targetBuildingId}/price_water`] = waterPrice;
    if (waterPrice !== currentWaterPrice) {
      updates[`buildings/${targetBuildingId}/price_water_updated_at`] = updatedAt;
    }
    
    // X√≥a tr∆∞·ªùng c≈© n·∫øu c√≥
    if (buildingData.price_updated_at) {
      updates[`buildings/${targetBuildingId}/price_updated_at`] = null;
    }

    await db.ref().update(updates);

    // L·∫•y timestamp m·ªõi nh·∫•t sau khi c·∫≠p nh·∫≠t
    const newElectricityUpdatedAt = (electricityPrice !== currentElectricityPrice) ? updatedAt : currentElectricityUpdatedAt;
    const newWaterUpdatedAt = (waterPrice !== currentWaterPrice) ? updatedAt : currentWaterUpdatedAt;

    console.log(`üí∞ Pricing update for ${targetBuildingId}:`, {
      electricityPrice,
      electricityUpdated: electricityPrice !== currentElectricityPrice,
      waterPrice,
      waterUpdated: waterPrice !== currentWaterPrice
    });

    res.json({
      success: true,
      message: "ƒê√£ c·∫≠p nh·∫≠t gi√° th√†nh c√¥ng",
      data: {
        electricityPrice,
        waterPrice,
        electricityUpdatedAt: newElectricityUpdatedAt,
        waterUpdatedAt: newWaterUpdatedAt
      }
    });

  } catch (error) {
    console.error("Error updating pricing:", error);
    res.status(500).json({
      success: false,
      error: "L·ªói khi c·∫≠p nh·∫≠t gi√°: " + error.message
    });
  }
};

// API ƒë·ªÉ l·∫•y calibration data c·ªßa m·ªôt ph√≤ng c·ª• th·ªÉ
const getRoomCalibrationData = async (req, res) => {
  try {
    const { roomId } = req.params;
    const targetBuildingId = getTargetBuildingId(req);

    if (!roomId) {
      return res.status(400).json({
        success: false,
        error: "Thi·∫øu roomId"
      });
    }

    // L·∫•y d·ªØ li·ªáu room c·ª• th·ªÉ
    const roomSnapshot = await db.ref(`buildings/${targetBuildingId}/rooms/${roomId}`).once("value");
    const roomData = roomSnapshot.val();

    if (!roomData) {
      return res.status(404).json({
        success: false,
        error: "Ph√≤ng kh√¥ng t·ªìn t·∫°i"
      });
    }

    // T√¨m calibration data cho electricity v√† water
    let electricityCalibration = { sensorValue: 0, actualValue: 0, calibrationFactor: 1.0, calibratedAt: null };
    let waterCalibration = { sensorValue: 0, actualValue: 0, calibrationFactor: 1.0, calibratedAt: null };

    if (roomData.nodes) {
      Object.values(roomData.nodes).forEach(node => {
        if (node.type === 'electricity' && node.calibration) {
          electricityCalibration = node.calibration;
        } else if (node.type === 'water' && node.calibration) {
          waterCalibration = node.calibration;
        }
      });
    }

    res.json({
      success: true,
      data: {
        roomId,
        calibrationData: {
          electricity: electricityCalibration,
          water: waterCalibration
        }
      }
    });

  } catch (error) {
    console.error("Error loading room calibration data:", error);
    res.status(500).json({
      success: false,
      error: "L·ªói khi t·∫£i d·ªØ li·ªáu calibration: " + error.message
    });
  }
};

module.exports = {
  getSettings,
  updateCalibration,
  updatePricing,
  getRoomCalibrationData
}; 