// ==================== REALTIME NODES UPDATE ====================

// Realtime node data updater
class RealtimeNodesUpdater {
  constructor() {
    this.nodesRef = null;
    this.roomsRef = null;
    this.listeners = new Map();
    this.isInitialized = false;
    this.overcurrentWarnings = new Map(); // Track overcurrent warnings to prevent spam
  }

  async initialize() {
    if (this.isInitialized) return;
    
    try {
      // Wait for Firebase to be ready
      const firebaseReady = await initializeFirebase();
      if (!firebaseReady || !database) {
        // Quick retry if Firebase not ready
        setTimeout(() => this.initialize(), 200);
        return false;
      }

      // Use currentBuildingId from server (passed from dashboardController)
      const buildingId = '<%= currentBuildingId || "building_id_1" %>';
      this.roomsRef = database.ref(`buildings/${buildingId}/rooms`);
      this.isInitialized = true;
      
      // Start listening for all room nodes
      this.startRealtimeNodeUpdates();
      
      return true;
    } catch (error) {
      console.error('Error initializing realtime nodes:', error);
      // Retry once after 500ms if failed
      setTimeout(() => this.initialize(), 500);
      return false;
    }
  }

  startRealtimeNodeUpdates() {
    if (!this.roomsRef) return;

    // Listen to rooms data changes
    this.roomsRef.on('value', (snapshot) => {
      const roomsData = snapshot.val() || {};
      
      // Update each room's node data
      Object.entries(roomsData).forEach(([roomId, roomData]) => {
        if (roomData.nodes) {
          this.updateRoomNodeButtons(roomId, roomData.nodes);
        }
      });
    });
  }

  updateRoomNodeButtons(roomId, nodesData) {
    // Find the table row for this room
    const roomRow = document.querySelector(`tr[data-room-id="${roomId}"]`);
    if (!roomRow) return;

    // Update electricity button
    Object.entries(nodesData).forEach(([nodeId, nodeData]) => {
      if (nodeData.type === 'electricity') {
        this.updateElectricityButton(roomRow, nodeId, nodeData);
      } else if (nodeData.type === 'water') {
        this.updateWaterButton(roomRow, nodeId, nodeData);
      } else if (nodeData.type === 'custom') {
        this.updateCustomButton(roomRow, nodeId, nodeData);
      }
    });
  }

  updateElectricityButton(roomRow, nodeId, nodeData) {
    const electricButton = roomRow.querySelector('.quick-action-btn.electricity.has-node');
    if (!electricButton) return;

    const lastData = nodeData.lastData || {};
    const electricValue = lastData.electric;
    const battLevel = lastData.batt;
    const currentValue = lastData.current;

    // Check for overcurrent warning
    const roomId = roomRow.getAttribute('data-room-id');
    const roomNumberElement = roomRow.querySelector('td:first-child');
    const roomNumber = roomNumberElement ? roomNumberElement.textContent.trim() : 'N/A';
    
    if (currentValue !== null && currentValue !== undefined && currentValue > 25) {
      // Check if we already showed warning for this room recently (within 30 seconds)
      const now = Date.now();
      const lastWarningTime = this.overcurrentWarnings.get(roomId);
      
      if (!lastWarningTime || (now - lastWarningTime) > 30000) { // 30 seconds cooldown
        // Show overcurrent warning toast
        if (typeof toastManager !== 'undefined') {
          toastManager.warning(
            `Ph√≤ng ${roomNumber} ƒëang b·ªã qu√° d√≤ng ƒëi·ªán! D√≤ng ƒëi·ªán hi·ªán t·∫°i: ${currentValue}A`,
            5000,
            'C·∫£nh b√°o qu√° d√≤ng ƒëi·ªán'
          );
        }
        
        // Show overcurrent warning modal for critical alert
        this.showOvercurrentModal(roomNumber, currentValue);
        
        // Send automatic notification to the room
        this.sendOvercurrentNotification(roomId, roomNumber, currentValue);
        
        // Update the last warning time for this room
        this.overcurrentWarnings.set(roomId, now);
      }
    } else {
      // Clear warning timestamp if current is back to normal
      this.overcurrentWarnings.delete(roomId);
    }

    // Update button text and data
    let buttonText = '<i class="fas fa-check"></i> ƒêi·ªán';
    if (electricValue !== null && electricValue !== undefined) {
      buttonText += `: ${electricValue} kWh`;
    }

    // Update battery display
    let batteryHtml = '';
    if (battLevel !== null && battLevel !== undefined) {
      const battIcon = this.getBatteryIcon(battLevel);
      batteryHtml = `
        <span class="node-battery-inline">
          <i class="fas fa-battery-${battIcon}"></i>
          ${battLevel}%
        </span>
      `;
    }

    electricButton.innerHTML = buttonText + batteryHtml;

    // Add overcurrent visual warning to button
    if (currentValue !== null && currentValue !== undefined && currentValue > 25) {
      electricButton.classList.add('overcurrent');
    } else {
      electricButton.classList.remove('overcurrent');
    }

    // Update tooltip
    let tooltip = `Qu·∫£n l√Ω node ƒëi·ªán: ${nodeId}`;
    if (battLevel !== null) tooltip += ` - Pin: ${battLevel}%`;
    if (electricValue !== null) tooltip += ` - ƒêi·ªán: ${electricValue} kWh`;
    if (currentValue !== null) tooltip += ` - D√≤ng: ${currentValue}A`;
    if (currentValue !== null && currentValue > 25) tooltip += ' ‚ö†Ô∏è QU√Å D√íNG!';
    electricButton.title = tooltip;
  }

  updateWaterButton(roomRow, nodeId, nodeData) {
    const waterButton = roomRow.querySelector('.quick-action-btn.water.has-node');
    if (!waterButton) return;

    const lastData = nodeData.lastData || {};
    const waterValue = lastData.water;
    const battLevel = lastData.batt;

    // Update button text and data
    let buttonText = '<i class="fas fa-check"></i> N∆∞·ªõc';
    if (waterValue !== null && waterValue !== undefined) {
      buttonText += `: ${waterValue} m¬≥`;
    }

    // Update battery display
    let batteryHtml = '';
    if (battLevel !== null && battLevel !== undefined) {
      const battIcon = this.getBatteryIcon(battLevel);
      batteryHtml = `
        <span class="node-battery-inline">
          <i class="fas fa-battery-${battIcon}"></i>
          ${battLevel}%
        </span>
      `;
    }

    waterButton.innerHTML = buttonText + batteryHtml;

    // Update tooltip
    let tooltip = `Qu·∫£n l√Ω node n∆∞·ªõc: ${nodeId}`;
    if (battLevel !== null) tooltip += ` - Pin: ${battLevel}%`;
    if (waterValue !== null) tooltip += ` - N∆∞·ªõc: ${waterValue} m¬≥`;
    waterButton.title = tooltip;
  }

  updateCustomButton(roomRow, nodeId, nodeData) {
    const customButton = roomRow.querySelector(`.quick-action-btn.custom.has-node[data-node-id="${nodeId}"]`);
    if (!customButton) return;

    const lastData = nodeData.lastData || {};
    const customValue = lastData.value;
    const battLevel = lastData.batt;
    const nodeName = nodeData.name || nodeId;

    // Update button text and data
    let buttonText = `<i class="fas fa-check"></i> ${nodeName}`;
    if (customValue !== null && customValue !== undefined) {
      buttonText += `: ${customValue}`;
    }

    // Update battery display
    let batteryHtml = '';
    if (battLevel !== null && battLevel !== undefined) {
      const battIcon = this.getBatteryIcon(battLevel);
      batteryHtml = `
        <span class="node-battery-inline">
          <i class="fas fa-battery-${battIcon}"></i>
          ${battLevel}%
        </span>
      `;
    }

    customButton.innerHTML = buttonText + batteryHtml;

    // Update tooltip
    let tooltip = `Qu·∫£n l√Ω node: ${nodeId}`;
    if (battLevel !== null) tooltip += ` - Pin: ${battLevel}%`;
    if (customValue !== null) tooltip += ` - Gi√° tr·ªã: ${customValue}`;
    customButton.title = tooltip;
  }

  getBatteryIcon(battLevel) {
    if (battLevel > 75) return 'full';
    if (battLevel > 50) return 'three-quarters';
    if (battLevel > 25) return 'half';
    return 'quarter';
  }

  showOvercurrentModal(roomNumber, currentValue) {
    try {
      // Update modal content
      document.getElementById('overcurrentRoomNumber').textContent = roomNumber;
      document.getElementById('overcurrentValue').textContent = `${currentValue}A`;
      
      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('overcurrentWarningModal'));
      modal.show();
    } catch (error) {
      console.error('Error showing overcurrent modal:', error);
    }
  }

  async sendOvercurrentNotification(roomId, roomNumber, currentValue) {
    try {
      console.log(`üö® Sending overcurrent notification to room ${roomId}`);
      
      const title = 'C·∫¢NH B√ÅO QU√Å D√íNG ƒêI·ªÜN';
      const message = `D√≤ng ƒëi·ªán hi·ªán t·∫°i: ${currentValue}A (v∆∞·ª£t ng∆∞·ª°ng an to√†n 25A). Vui l√≤ng ki·ªÉm tra ngay c√°c thi·∫øt b·ªã ƒëi·ªán ƒë·ªÉ tr√°nh nguy c∆° ch√°y n·ªï.`;
      
      const response = await fetch('/api/send-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roomId: roomId,
          title: title,
          message: message
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log(`‚úÖ Overcurrent notification sent and saved to room ${roomNumber}:`, {
          messageId: result.messageId,
          notificationId: result.notificationId,
          savedToDatabase: result.details.savedToDatabase
        });
      } else {
        console.error('Failed to send overcurrent notification:', result.error);
      }
      
    } catch (error) {
      console.error('Error sending overcurrent notification:', error);
    }
  }

  cleanup() {
    if (this.roomsRef) {
      this.roomsRef.off();
    }
    this.listeners.clear();
    this.overcurrentWarnings.clear(); // Clear overcurrent warnings
    this.isInitialized = false;
  }
}

// Global instance
window.realtimeNodesUpdater = new RealtimeNodesUpdater();

// Initialize realtime nodes when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Initialize immediately - Firebase should be ready by now
  window.realtimeNodesUpdater.initialize();
});

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
  if (window.realtimeNodesUpdater) {
    window.realtimeNodesUpdater.cleanup();
  }
}); 