    // ==================== TENANT MANAGEMENT FUNCTIONS ====================
    
    // Open Add Tenant Modal (for empty rooms)
    function openAddTenantModal(roomId, roomNumber) {
      // Set room info in hidden field and display
      document.getElementById('tenantRoomId').value = roomId;
      document.getElementById('tenantRoomNumber').textContent = roomNumber;
      
      // Clear all inputs
      document.getElementById('tenantName').value = '';
      document.getElementById('newPhoneNumber').value = '';
      
      // Show modal
      new bootstrap.Modal(document.getElementById('addTenantModal')).show();
    }
    
    // Open Manage Tenants Modal (for occupied rooms)
    function openManageTenantsModal(roomId, roomNumber) {
      // Set room info
      document.getElementById('manageTenantsRoomId').value = roomId;
      document.getElementById('manageTenantsModalTitle').innerHTML = 
        `<i class="fas fa-users"></i> Qu·∫£n l√Ω ng∆∞·ªùi thu√™ - Ph√≤ng ${roomNumber}`;
      
      // Hide add form if visible
      hideAddTenantForm();
      
      // Load current tenants
      loadTenantsList(roomId);
      
      // Show modal
      new bootstrap.Modal(document.getElementById('manageTenantsModal')).show();
    }
    
    // Load tenants list
    async function loadTenantsList(roomId) {
      try {
        const container = document.getElementById('tenantsListContainer');
        container.innerHTML = '<div class="text-center text-muted py-3"><i class="fas fa-spinner fa-spin"></i> ƒêang t·∫£i...</div>';
        
        const response = await fetch(`/api/room/${roomId}/tenants`);
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.message || 'L·ªói khi t·∫£i danh s√°ch');
        }
        
        const tenants = data.tenants || [];
        
        if (tenants.length === 0) {
          container.innerHTML = `
            <div class="text-center text-muted py-3">
              <i class="fas fa-user-slash"></i><br>
              Ch∆∞a c√≥ ng∆∞·ªùi thu√™ n√†o
            </div>`;
          return;
        }
        
        let html = '';
        tenants.forEach((tenant, index) => {
          html += `
            <div class="tenant-item mb-2 p-3 border rounded" data-tenant-index="${index}">
              <div class="d-flex justify-content-between align-items-start">
                <div class="tenant-info-detail">
                  <div class="tenant-name-primary">
                    <strong>${tenant.name}</strong>
                    ${index === 0 ? '<span class="badge bg-primary ms-2">ƒê·∫°i di·ªán</span>' : ''}
                  </div>
                  <div class="tenant-contact">
                    <i class="fas fa-phone text-muted"></i> ${formatPhoneDisplay(tenant.phone)}
                  </div>
                </div>
                <div class="tenant-actions">
                  <button type="button" class="btn btn-outline-primary btn-sm" onclick="editTenant('${index}')">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTenant('${index}')">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>`;
        });
        
        container.innerHTML = html;
        
      } catch (error) {
        console.error('Error loading tenants:', error);
        document.getElementById('tenantsListContainer').innerHTML = 
          `<div class="text-center text-danger py-3"><i class="fas fa-exclamation-triangle"></i> ${error.message}</div>`;
      }
    }
    
    // Show add tenant form
    function showAddTenantForm() {
      document.getElementById('addTenantFormSection').style.display = 'block';
      // Clear form
      document.getElementById('addTenantForm').reset();
    }
    
    // Hide add tenant form
    function hideAddTenantForm() {
      document.getElementById('addTenantFormSection').style.display = 'none';
      document.getElementById('addTenantForm').reset();
    }

    // Add tenant form submit handler
    document.addEventListener('DOMContentLoaded', function() {
      const addTenantForm = document.getElementById('addTenantForm');
      if (addTenantForm) {
        addTenantForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const roomId = document.getElementById('manageTenantsRoomId').value;
          const tenantName = document.getElementById('newTenantName').value.trim();
          const tenantPhone = document.getElementById('newTenantPhone').value.trim();
          
          // Validation
          if (!tenantName || !tenantPhone) {
            alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!');
            return;
          }
          
          // Basic phone validation
          if (!/^[0-9+\-\s()]+$/.test(tenantPhone)) {
            alert('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!');
            return;
          }
          
          try {
            // Normalize phone number for storage
            const normalizedPhone = normalizePhoneForStorage(tenantPhone);
            
            // Submit to server using new API endpoint
            const response = await fetch(`/api/room/${roomId}/add-tenant`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                tenantName: tenantName,
                phoneNumber: normalizedPhone
              })
            });
            
            const result = await response.json();
            
            if (result.success) {
              // Hide the add form
              hideAddTenantForm();
              
              // Reload the tenants list to show the new tenant
              await loadTenantsList(roomId);
              
              // Show success message
              showSuccessToast(result.message || 'Th√™m ng∆∞·ªùi thu√™ th√†nh c√¥ng');
              
              // Refresh the specific room row in the main table
              await refreshRoomRow(roomId);
            } else {
              throw new Error(result.message || 'L·ªói khi th√™m ng∆∞·ªùi thu√™');
            }
            
          } catch (error) {
            console.error('Error adding tenant:', error);
            showErrorToast('L·ªói khi th√™m ng∆∞·ªùi thu√™: ' + error.message);
          }
        });
      }
    });
    
    // Edit tenant function
    function editTenant(tenantIndex) {
      const roomId = document.getElementById('manageTenantsRoomId').value;
      
      // Get current tenants list from the displayed data
      const tenantItems = document.querySelectorAll('.tenant-item');
      if (tenantIndex >= tenantItems.length) {
        showErrorToast('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi thu√™');
        return;
      }
      
      const tenantItem = tenantItems[tenantIndex];
      const tenantName = tenantItem.querySelector('.tenant-name-primary strong').textContent;
      const tenantPhoneElement = tenantItem.querySelector('.tenant-contact');
      const tenantPhone = tenantPhoneElement.textContent.replace(/üìû|/g, '').trim();
      
      // Show edit form
      showEditTenantForm(roomId, tenantIndex, tenantName, tenantPhone);
    }

    // Delete tenant function
    function deleteTenant(tenantIndex) {
      const roomId = document.getElementById('manageTenantsRoomId').value;
      
      // Get current tenants list from the displayed data
      const tenantItems = document.querySelectorAll('.tenant-item');
      if (tenantIndex >= tenantItems.length) {
        showErrorToast('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi thu√™');
        return;
      }
      
      const tenantItem = tenantItems[tenantIndex];
      const tenantName = tenantItem.querySelector('.tenant-name-primary strong').textContent;
      const tenantPhone = tenantItem.querySelector('.tenant-contact').textContent.replace(/üìû|/g, '').trim();
      const isRepresentative = tenantIndex === 0;
      
      // Store data for deletion execution
      window.pendingDeleteTenant = {
        roomId: roomId,
        tenantIndex: tenantIndex,
        tenantName: tenantName
      };
      
      // Setup modal content
      document.getElementById('deleteTenantInfo').textContent = `T√™n: ${tenantName} | SƒêT: ${tenantPhone}`;
      
      if (isRepresentative) {
        document.getElementById('deleteTenantQuestion').textContent = 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi ƒë·∫°i di·ªán n√†y?';
        document.getElementById('deleteTenantWarning').style.display = 'block';
        document.getElementById('deleteTenantWarningText').textContent = 'Sau khi x√≥a, ng∆∞·ªùi thu√™ ti·∫øp theo s·∫Ω tr·ªü th√†nh ƒë·∫°i di·ªán m·ªõi.';
      } else {
        document.getElementById('deleteTenantQuestion').textContent = 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi thu√™ n√†y?';
        document.getElementById('deleteTenantWarning').style.display = 'none';
      }
      
      // Show confirmation modal
      const confirmModal = new bootstrap.Modal(document.getElementById('confirmDeleteTenantModal'));
      confirmModal.show();
    }

    // Execute delete tenant (called from modal) - Global function
    window.executeDeleteTenant = function() {
      if (!window.pendingDeleteTenant) {
        showErrorToast('Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi thu√™ ƒë·ªÉ x√≥a');
        return;
      }
      
      const { roomId, tenantIndex } = window.pendingDeleteTenant;
      
      // Close modal
      const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteTenantModal'));
      if (confirmModal) {
        confirmModal.hide();
      }
      
      // Execute deletion
      deleteTenantFromRoom(roomId, tenantIndex);
      
      // Clear pending data
      window.pendingDeleteTenant = null;
    };

    // Show edit tenant form
    function showEditTenantForm(roomId, tenantIndex, currentName, currentPhone) {
      // Hide add form if showing
      hideAddTenantForm();
      
      // Create edit form HTML
      const editFormHtml = `
        <hr>
        <h6><i class="fas fa-edit"></i> Ch·ªânh s·ª≠a ng∆∞·ªùi thu√™</h6>
        <form id="editTenantForm">
          <input type="hidden" id="editTenantIndex" value="${tenantIndex}">
          <div class="row">
            <div class="col-md-6">
              <label for="editTenantName" class="form-label">
                <i class="fas fa-user"></i> H·ªç t√™n <span class="text-danger">*</span>
              </label>
              <input type="text" class="form-control" id="editTenantName" value="${currentName}" required>
            </div>
            <div class="col-md-6">
              <label for="editTenantPhone" class="form-label">
                <i class="fas fa-phone"></i> S·ªë ƒëi·ªán tho·∫°i <span class="text-danger">*</span>
              </label>
              <input type="tel" class="form-control" id="editTenantPhone" value="${currentPhone}" required>
            </div>
          </div>
          <div class="form-text text-muted mt-2">
            ${tenantIndex === 0 ? 'ƒê√¢y l√† ng∆∞·ªùi ƒë·∫°i di·ªán ch√≠nh c·ªßa ph√≤ng.' : 'Ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi thu√™.'}
          </div>
          <div class="mt-3">
            <button type="button" class="btn btn-secondary btn-sm" onclick="hideEditTenantForm()">
              <i class="fas fa-times"></i> H·ªßy
            </button>
            <button type="submit" class="btn btn-primary btn-sm">
              <i class="fas fa-save"></i> C·∫≠p nh·∫≠t
            </button>
          </div>
        </form>
      `;
      
      // Show edit form
      const container = document.getElementById('tenantsListContainer');
      const editSection = document.getElementById('editTenantFormSection') || document.createElement('div');
      editSection.id = 'editTenantFormSection';
      editSection.innerHTML = editFormHtml;
      
      if (!document.getElementById('editTenantFormSection')) {
        container.parentNode.appendChild(editSection);
      }
      
      editSection.style.display = 'block';
      
      // Add form submit handler
      document.getElementById('editTenantForm').addEventListener('submit', handleEditTenantSubmit);
    }

    // Hide edit tenant form
    function hideEditTenantForm() {
      const editSection = document.getElementById('editTenantFormSection');
      if (editSection) {
        editSection.style.display = 'none';
      }
    }

    // Handle edit tenant form submit
    async function handleEditTenantSubmit(e) {
      e.preventDefault();
      
      const roomId = document.getElementById('manageTenantsRoomId').value;
      const tenantIndex = parseInt(document.getElementById('editTenantIndex').value);
      const tenantName = document.getElementById('editTenantName').value.trim();
      const tenantPhone = document.getElementById('editTenantPhone').value.trim();
      
      // Validation
      if (!tenantName || !tenantPhone) {
        showErrorToast('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!');
        return;
      }
      
      // Basic phone validation
      if (!/^[0-9+\-\s()]+$/.test(tenantPhone)) {
        showErrorToast('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!');
        return;
      }
      
      try {
        // Normalize phone number for storage
        const normalizedPhone = normalizePhoneForStorage(tenantPhone);
        
        // Submit to server
        const response = await fetch(`/api/room/${roomId}/edit-tenant`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            tenantIndex: tenantIndex,
            tenantName: tenantName,
            phoneNumber: normalizedPhone
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Hide the edit form
          hideEditTenantForm();
          
          // Reload the tenants list
          await loadTenantsList(roomId);
          
          // Show success message
          showSuccessToast(result.message || 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi thu√™ th√†nh c√¥ng');
          
          // Refresh the specific room row in the main table
          await refreshRoomRow(roomId);
        } else {
          throw new Error(result.message || 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi thu√™');
        }
        
      } catch (error) {
        console.error('Error editing tenant:', error);
        showErrorToast('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: ' + error.message);
      }
    }

    // Delete tenant from room
    async function deleteTenantFromRoom(roomId, tenantIndex) {
      try {
        const response = await fetch(`/api/room/${roomId}/delete-tenant`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            tenantIndex: tenantIndex
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Reload the tenants list
          await loadTenantsList(roomId);
          
          // Show success message
          showSuccessToast(result.message || 'X√≥a ng∆∞·ªùi thu√™ th√†nh c√¥ng');
          
          // Refresh the specific room row in the main table
          await refreshRoomRow(roomId);
        } else {
          throw new Error(result.message || 'L·ªói khi x√≥a ng∆∞·ªùi thu√™');
        }
        
      } catch (error) {
        console.error('Error deleting tenant:', error);
        showErrorToast('L·ªói khi x√≥a ng∆∞·ªùi thu√™: ' + error.message);
      }
    }

    // Refresh specific room row in main table
    async function refreshRoomRow(roomId) {
      try {
        // Get updated room data from server
        const response = await fetch(`/api/room/${roomId}/data`);
        const result = await response.json();
        
        if (!result.success) {
          console.error('Failed to fetch room data:', result.message);
          return;
        }
        
        const room = result.room;
        
        // Find the row in the table
        const row = document.querySelector(`tr[data-room-id="${roomId}"]`);
        
        if (!row) {
          console.error('Could not find room row to update for roomId:', roomId);
          return;
        }
        
        // Update representative column
        const repColumn = row.querySelector('.representative-info');
        if (repColumn) {
          updateRepresentativeColumn(repColumn, room);
        }
        
        // Update member count column
        const memberColumn = row.querySelector('.member-count');
        if (memberColumn) {
          updateMemberCountColumn(memberColumn, room);
        }
        
        // Update status column if needed
        const statusColumn = row.querySelector('td:nth-child(4)');
        if (statusColumn) {
          updateStatusColumn(statusColumn, room);
        }
        
      } catch (error) {
        console.error('Error refreshing room row:', error);
      }
    }
    
    // Update representative column content
    function updateRepresentativeColumn(column, room) {
      const hasPhone = room.phoneNumber && room.phoneNumber.trim() !== '';
      
      if (hasPhone) {
        column.innerHTML = `
          <button type="button" 
                  class="representative-button occupied"
                  onclick="openManageTenantsModal('${room.id}', '${room.roomNumber}')"
                  title="Qu·∫£n l√Ω danh s√°ch ng∆∞·ªùi thu√™">
            <div class="rep-info-inline">
              <div class="rep-name-inline">
                <i class="fas fa-user"></i>
                <span>${room.tenantName || 'Ng∆∞·ªùi ƒë·∫°i di·ªán'}</span>
              </div>
              <div class="rep-phone-inline">
                <i class="fas fa-phone"></i>
                <span>${room.phoneNumber}</span>
              </div>
            </div>
          </button>
        `;
      } else {
        column.innerHTML = `
          <button type="button" 
                  class="representative-button vacant" 
                  onclick="openAddTenantModal('${room.id}', '${room.roomNumber}')"
                  title="Th√™m ng∆∞·ªùi thu√™">
            <div class="empty-room">
              <i class="fas fa-user-plus"></i>
              <span>Th√™m ng∆∞·ªùi thu√™</span>
            </div>
          </button>
        `;
      }
    }
    
    // Update member count column
    function updateMemberCountColumn(column, room) {
      const tenantCount = room.tenantCount || 0;
      
      if (tenantCount > 0) {
        column.className = 'member-count occupied';
        column.innerHTML = `<i class="fas fa-users"></i> ${tenantCount}`;
      } else {
        column.className = 'member-count vacant';
        column.innerHTML = `<i class="fas fa-minus"></i> 0`;
      }
    }
    
    // Update status column content
    function updateStatusColumn(column, room) {
      const hasPhone = room.phoneNumber && room.phoneNumber.trim() !== '';
      const currentStatus = room.status || 'vacant';
      
      let statusHtml = '';
      
      if (hasPhone) {
        // Room has phone = occupied, can only switch to maintenance
        if (currentStatus === 'maintenance') {
          statusHtml = `
            <form action="/update-room-status" method="POST" class="d-inline">
              <input type="hidden" name="roomId" value="${room.id}">
              <select name="status" class="form-select form-select-sm status-badge status-maintenance" onchange="this.form.submit()">
                <option value="occupied">ƒê√£ thu√™</option>
                <option value="maintenance" selected>B·∫£o tr√¨</option>
              </select>
            </form>
          `;
        } else {
          statusHtml = `
            <form action="/update-room-status" method="POST" class="d-inline">
              <input type="hidden" name="roomId" value="${room.id}">
              <select name="status" class="form-select form-select-sm status-badge status-occupied" onchange="this.form.submit()">
                <option value="occupied" selected>ƒê√£ thu√™</option>
                <option value="maintenance">B·∫£o tr√¨</option>
              </select>
            </form>
          `;
        }
      } else {
        // Room has no phone = vacant, can only switch to maintenance
        if (currentStatus === 'maintenance') {
          statusHtml = `
            <form action="/update-room-status" method="POST" class="d-inline">
              <input type="hidden" name="roomId" value="${room.id}">
              <select name="status" class="form-select form-select-sm status-badge status-maintenance" onchange="this.form.submit()">
                <option value="vacant">Tr·ªëng</option>
                <option value="maintenance" selected>B·∫£o tr√¨</option>
              </select>
            </form>
          `;
        } else {
          statusHtml = `
            <form action="/update-room-status" method="POST" class="d-inline">
              <input type="hidden" name="roomId" value="${room.id}">
              <select name="status" class="form-select form-select-sm status-badge status-vacant" onchange="this.form.submit()">
                <option value="vacant" selected>Tr·ªëng</option>
                <option value="maintenance">B·∫£o tr√¨</option>
              </select>
            </form>
          `;
        }
      }
      
      column.innerHTML = statusHtml;
    }

    // Format phone for display
    function formatPhoneDisplay(phone) {
      if (phone.startsWith('+84')) {
        return '0' + phone.substring(3);
      }
      return phone;
    }
    
    // Open Manage Phone Modal
    function openManagePhoneModal(roomId, roomNumber, phoneNumber) {
      try {
        currentManagedPhoneRoomId = roomId;
        currentManagedPhoneNumber = phoneNumber;
        
        // Format phone number for display: +84 -> 0
        let displayPhone = phoneNumber;
        if (displayPhone.startsWith('+84')) {
          displayPhone = '0' + displayPhone.substring(3);
        } else if (displayPhone.startsWith('84') && displayPhone.length >= 10) {
          displayPhone = '0' + displayPhone.substring(2);
        }
        
        // Update modal title and content
        document.getElementById('managePhoneModalTitle').innerHTML = `<i class="fas fa-phone-alt"></i> Qu·∫£n l√Ω s·ªë ƒëi·ªán tho·∫°i - Ph√≤ng ${roomNumber}`;
        document.getElementById('currentPhone').value = displayPhone;
        
        // Clear dropdown selection
        document.getElementById('newPhone').value = '';
        
        // Load available phone numbers for replacement
        loadAvailablePhoneNumbers('newPhone');
        
        // Add event listener for dropdown selection
        setTimeout(() => {
          const newPhoneSelect = document.getElementById('newPhone');
          const currentPhoneInput = document.getElementById('currentPhone');
          
          // Remove any existing listeners
          newPhoneSelect.removeEventListener('change', handleNewPhoneSelectChange);
          newPhoneSelect.addEventListener('change', handleNewPhoneSelectChange);
          
          function handleNewPhoneSelectChange() {
            const selectedPhone = this.value;
            if (selectedPhone) {
              // Format and copy selected phone to direct input - ensure display format (0 prefix)
              let formattedPhone = selectedPhone;
              if (formattedPhone.startsWith('+84')) {
                formattedPhone = '0' + formattedPhone.substring(3);
              } else if (formattedPhone.startsWith('84') && formattedPhone.length >= 10) {
                formattedPhone = '0' + formattedPhone.substring(2);
              }
              // Ensure it starts with 0 for display
              if (!formattedPhone.startsWith('0') && formattedPhone.length >= 9) {
                // If somehow it doesn't start with 0, add it
                if (formattedPhone.match(/^[1-9]/)) {
                  formattedPhone = '0' + formattedPhone;
                }
              }
              currentPhoneInput.value = formattedPhone;
            }
          }
        }, 500);
        
        new bootstrap.Modal(document.getElementById('managePhoneModal')).show();
        
      } catch (error) {
        alert('L·ªói khi m·ªü modal qu·∫£n l√Ω s·ªë ƒëi·ªán tho·∫°i: ' + error.message);
      }
    }
    
    // Load available phone numbers
    async function loadAvailablePhoneNumbers(selectId = 'phoneNumberSelect') {
      try {
        const response = await fetch('/api/phone-numbers');
        const phoneNumbers = await response.json();
        
        const select = document.getElementById(selectId);
        
        // Different default text based on which modal is calling
        if (selectId === 'newPhone') {
          select.innerHTML = '<option value="">Ch·ªçn s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒëƒÉng k√Ω...</option>';
        } else {
          select.innerHTML = '<option value="">Ch·ªçn s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒëƒÉng k√Ω</option>';
        }
        
        // Only show available phones (not assigned to rooms)
        const availablePhones = phoneNumbers.filter(phone => !phone.hasRoom);
        
        if (availablePhones.length === 0) {
          select.innerHTML = '<option value="">Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i kh·∫£ d·ª•ng</option>';
          return;
        }
        
        availablePhones.forEach(phone => {
          const option = document.createElement('option');
          option.value = phone.phoneNumber;
          
          // Format phone number: +84 -> 0
          let displayPhone = phone.phoneNumber;
          if (displayPhone.startsWith('+84')) {
            displayPhone = '0' + displayPhone.substring(3);
          } else if (displayPhone.startsWith('84') && displayPhone.length >= 10) {
            displayPhone = '0' + displayPhone.substring(2);
          }
          
          // Only show formatted phone number
          option.textContent = displayPhone;
          
          select.appendChild(option);
        });
        
      } catch (error) {
        console.error('L·ªói khi load s·ªë ƒëi·ªán tho·∫°i:', error);
        document.getElementById(selectId).innerHTML = '<option value="">L·ªói khi t·∫£i d·ªØ li·ªáu</option>';
      }
    }
    
    // Show phone info in modal
    function showPhoneInfoInModal(name, email) {
      const infoDiv = document.getElementById('phoneInfo');
      const contentDiv = document.getElementById('phoneInfoContent');
      
      contentDiv.innerHTML = `
        <i class="fas fa-user"></i> T√™n: ${name || 'Ch∆∞a c√≥'}<br>
        <i class="fas fa-envelope"></i> Email: ${email || 'Ch∆∞a c√≥'}
      `;
      infoDiv.style.display = 'block';
    }
    
    function hidePhoneInfoInModal() {
      document.getElementById('phoneInfo').style.display = 'none';
    }
    
    // Save phone changes
    function savePhoneChanges() {
      if (!currentManagedPhoneRoomId) {
        alert('Kh√¥ng c√≥ th√¥ng tin ph√≤ng ƒë·ªÉ l∆∞u');
        return;
      }
      
      // Get values from both inputs
      const currentPhoneInput = document.getElementById('currentPhone').value.trim();
      const selectedPhone = document.getElementById('newPhone').value.trim();
      
      // Prioritize direct input, fallback to dropdown selection
      let newPhone = '';
      if (currentPhoneInput) {
        newPhone = currentPhoneInput;
      } else if (selectedPhone) {
        // Format selected phone for display (this should already be formatted)
        newPhone = selectedPhone;
        if (newPhone.startsWith('+84')) {
          newPhone = '0' + newPhone.substring(3);
        } else if (newPhone.startsWith('84') && newPhone.length >= 10) {
          newPhone = '0' + newPhone.substring(2);
        }
      }
      
      // Validate phone number format (basic validation)
      if (newPhone && !/^[0-9+\-\s()]+$/.test(newPhone)) {
        alert('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!');
        return;
      }
      
      // Normalize phone for backend storage (0 -> +84) but keep display as is
      const normalizedPhone = normalizePhoneForStorage(newPhone);
      
      // Update the display field to show the proper format (0 prefix)
      if (newPhone && !newPhone.startsWith('0') && normalizedPhone.startsWith('+84')) {
        const displayPhone = '0' + normalizedPhone.substring(3);
        document.getElementById('currentPhone').value = displayPhone;
      }
      
      // Create form to submit
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = '/update-room-phone';
      form.style.display = 'none';
      
      const roomIdInput = document.createElement('input');
      roomIdInput.type = 'hidden';
      roomIdInput.name = 'roomId';
      roomIdInput.value = currentManagedPhoneRoomId;
      
      const phoneInput = document.createElement('input');
      phoneInput.type = 'hidden';
      phoneInput.name = 'phoneNumber';
      phoneInput.value = normalizedPhone;
      
      form.appendChild(roomIdInput);
      form.appendChild(phoneInput);
      document.body.appendChild(form);
      form.submit();
    }
    
    // Remove phone from room
    function removePhoneFromRoom() {
      if (!currentManagedPhoneRoomId || !currentManagedPhoneNumber) {
        alert('Kh√¥ng c√≥ th√¥ng tin ph√≤ng ho·∫∑c s·ªë ƒëi·ªán tho·∫°i');
        return;
      }
      
      // Format phone for display
      let displayPhone = currentManagedPhoneNumber;
      if (displayPhone.startsWith('+84')) {
        displayPhone = '0' + displayPhone.substring(3);
      } else if (displayPhone.startsWith('84') && displayPhone.length >= 10) {
        displayPhone = '0' + displayPhone.substring(2);
      }
      
      // Show phone info in delete modal
      document.getElementById('deletePhoneInfo').textContent = `S·ªë ƒëi·ªán tho·∫°i: ${displayPhone}`;
      
      // Show confirmation modal
      const confirmModal = new bootstrap.Modal(document.getElementById('confirmDeletePhoneModal'));
      confirmModal.show();
    }
    
    // Execute remove phone after confirmation
    function executeRemovePhone() {
      if (!currentManagedPhoneRoomId) {
        alert('Kh√¥ng c√≥ th√¥ng tin ph√≤ng');
        return;
      }
      
      // Close confirmation modal
      const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeletePhoneModal'));
      if (confirmModal) {
        confirmModal.hide();
      }
      
      // Close manage phone modal
      const manageModal = bootstrap.Modal.getInstance(document.getElementById('managePhoneModal'));
      if (manageModal) {
        manageModal.hide();
      }
      
      // Create form to submit
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = '/remove-phone-from-room';
      form.style.display = 'none';
      
      const roomIdInput = document.createElement('input');
      roomIdInput.type = 'hidden';
      roomIdInput.name = 'roomId';
      roomIdInput.value = currentManagedPhoneRoomId;
      
      form.appendChild(roomIdInput);
      document.body.appendChild(form);
      form.submit();
    }
    
