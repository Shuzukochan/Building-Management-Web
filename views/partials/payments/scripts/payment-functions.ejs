<script>
  // Global page data - Safe initialization
  try {
    window.pageData = {
      success: <%- JSON.stringify(success || null) %>,
      error: <%- JSON.stringify(error || null) %>,
      currentMonthKey: '<%- currentMonthKey || "" %>'
    };
  } catch (e) {
    console.error('Error initializing pageData:', e);
    window.pageData = {
      success: null,
      error: null,
      currentMonthKey: ''
    };
  }

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    initializeMonthSelector();
    checkUnpaidPreviousMonths();
    showPageMessages();
    setupModalEventHandlers();
  });

  // Initialize month dropdown
  function initializeMonthSelector() {
    const selector = document.getElementById('monthSelector');
    const currentDate = new Date();
    
    for (let i = 0; i < 6; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
      const monthDisplay = `${date.getMonth() + 1}/${date.getFullYear()}`;
      
      if (monthKey !== '<%= currentMonthKey %>') {
        const option = document.createElement('option');
        option.value = monthKey;
        option.textContent = monthDisplay;
        selector.appendChild(option);
      }
    }
  }

  // Change month function
  function changeMonth(monthKey) {
    window.location.href = `/payments?month=${monthKey}`;
  }

  // Show page messages
  function showPageMessages() {
    if (window.pageData.success) showSuccessToast(window.pageData.success);
    if (window.pageData.error) showErrorToast(window.pageData.error);
  }

  // Setup modal event handlers
  function setupModalEventHandlers() {
    // X·ª≠ l√Ω thanh to√°n ti·ªÅn m·∫∑t
    const confirmCashBtn = document.getElementById('confirmCashPayment');
    if (confirmCashBtn) {
      confirmCashBtn.addEventListener('click', function() {
        if (!currentRoomId) return;
        submitPayment('cash');
      });
    }
    
    // Transfer payment functionality removed
  }

  // Payment reminder function
  async function remindPayment(roomId, roomNumber) {
    // Ki·ªÉm tra n·∫øu n√∫t b·ªã disable th√¨ kh√¥ng l√†m g√¨
    if (event.target.disabled) {
      return;
    }
    
    try {
      // Disable button while sending
      const button = event.target;
      const originalText = button.innerHTML;
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang g·ª≠i...';
      
      // L·∫•y th√¥ng tin th√°ng hi·ªán t·∫°i ƒë·ªÉ t·∫°o n·ªôi dung th√¥ng b√°o
      const currentMonthKey = window.pageData.currentMonthKey;
      const [year, month] = currentMonthKey.split('-');
      const monthNumber = parseInt(month);
      
      // T·∫°o n·ªôi dung th√¥ng b√°o
      const title = 'Qu·∫£n l√≠ to√† nh√†';
      const message = `Vui l√≤ng thanh to√°n ti·ªÅn ƒëi·ªán n∆∞·ªõc th√°ng ${monthNumber}`;
      
      console.log(`üì± Sending payment reminder to room ${roomId}:`, { title, message });
      
      // G·ª≠i th√¥ng b√°o FCM
      const response = await fetch('/api/send-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roomId: roomId,
          phoneNumber: '', // Server s·∫Ω t·ª± l·∫•y t·ª´ roomId
          title: title,
          message: message
        })
      });
      
      // Check for authentication error
      if (response.status === 401) {
        showErrorToast('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        setTimeout(() => {
          window.location.href = '/';
        }, 2000);
        return;
      }
      
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error);
      }
      
      // Show success message
      showSuccessToast(`ƒê√£ g·ª≠i nh·∫Øc nh·ªü thanh to√°n t·ªõi ph√≤ng ${roomNumber}`);
      
      // Reset button
      button.disabled = false;
      button.innerHTML = originalText;
      
    } catch (error) {
      console.error('Error sending payment reminder:', error);
      
      // Reset button
      const button = event.target;
      button.disabled = false;
      button.innerHTML = '<i class="fas fa-bell"></i> Nh·∫Øc thanh to√°n';
      
      showErrorToast('L·ªói khi g·ª≠i nh·∫Øc nh·ªü: ' + error.message);
    }
  }
  
  // Modal variables
  let currentRoomId = null;
  let currentRoomAmount = 0;
  
  // Show cash payment modal
  function showCashPaymentModal(roomId, roomNumber, amount) {
    currentRoomId = roomId;
    currentRoomAmount = parseInt(amount);
    
    // C·∫≠p nh·∫≠t th√¥ng tin trong modal
    document.getElementById('modalRoomNumber').textContent = `Ph√≤ng ${roomNumber}`;
    document.getElementById('modalPaymentAmount').textContent = `${parseInt(amount).toLocaleString('vi-VN')}ƒë`;
    
    // Hi·ªÉn th·ªã modal
    const modal = new bootstrap.Modal(document.getElementById('cashPaymentModal'));
    modal.show();
  }
  
  // Transfer payment modal function removed
  
  // Submit payment
  function submitPayment(method) {
    console.log(`üí∞ Submitting payment: Room=${currentRoomId}, Method=${method}, Amount=${currentRoomAmount}`);
    
    // T·∫°o form ƒë·ªÉ submit
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/mark-payment';
    form.style.display = 'none';
    
    const roomIdInput = document.createElement('input');
    roomIdInput.type = 'hidden';
    roomIdInput.name = 'roomId';
    roomIdInput.value = currentRoomId;
    
    const monthInput = document.createElement('input');
    monthInput.type = 'hidden';
    monthInput.name = 'month';
    monthInput.value = window.pageData.currentMonthKey;
    
    const methodInput = document.createElement('input');
    methodInput.type = 'hidden';
    methodInput.name = 'paymentMethod';
    methodInput.value = method;
    
    const amountInput = document.createElement('input');
    amountInput.type = 'hidden';
    amountInput.name = 'amount';
    amountInput.value = currentRoomAmount;
    
    form.appendChild(roomIdInput);
    form.appendChild(monthInput);
    form.appendChild(methodInput);
    form.appendChild(amountInput);
    document.body.appendChild(form);
    
    console.log(`üì§ Form data: roomId=${currentRoomId}, month=${window.pageData.currentMonthKey}, paymentMethod=${method}, amount=${currentRoomAmount}`);
    form.submit();
  }
</script> 