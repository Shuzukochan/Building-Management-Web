<script>
// ==================== DEVICE TIMEOUT FUNCTIONS ====================

/**
 * Load device timeout t·ª´ UI (ƒë√£ ƒë∆∞·ª£c render t·ª´ server)
 */
function getCurrentTimeoutFromUI() {
    const timeoutInput = document.getElementById('deviceTimeoutInput');
    return parseInt(timeoutInput.value) || 14400;
}

/**
 * C·∫≠p nh·∫≠t device timeout l√™n Firebase
 */
async function updateDeviceTimeout() {
    try {
        const timeoutInput = document.getElementById('deviceTimeoutInput');
        const newTimeout = parseInt(timeoutInput.value);
        
        console.log(`üîß Attempting to update timeout to: ${newTimeout}s`);
        
        // Validation
        if (isNaN(newTimeout) || newTimeout < 30 || newTimeout > 86400) {
            showToast('Th·ªùi gian timeout ph·∫£i t·ª´ 30 ƒë·∫øn 86400 gi√¢y (24 ti·∫øng)', 'error');
            return;
        }
        
        // Hi·ªÉn th·ªã loading
        const updateBtn = document.querySelector('[onclick="updateDeviceTimeout()"]');
        const originalText = updateBtn.innerHTML;
        updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang c·∫≠p nh·∫≠t...';
        updateBtn.disabled = true;
        
        console.log(`üì° Calling API PUT /api/device-timeout with timeout: ${newTimeout}`);
        
        const response = await fetch('/api/device-timeout', {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                deviceTimeout: newTimeout
            })
        });

        console.log(`üì° API Response status: ${response.status}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå API Error: ${response.status} - ${errorText}`);
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log(`üì° API Response data:`, data);
        
        if (!data.success) {
            throw new Error(data.error || 'C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng');
        }
        
        // C·∫≠p nh·∫≠t UI v·ªõi gi√° tr·ªã m·ªõi
        const currentTimeoutEl = document.getElementById('currentDeviceTimeout');
        
        if (currentTimeoutEl) currentTimeoutEl.textContent = `${newTimeout} gi√¢y`;
        
        showToast(`C·∫≠p nh·∫≠t timeout th√†nh c√¥ng: ${newTimeout} gi√¢y`, 'success');
        console.log(`‚úÖ Device timeout updated: ${newTimeout}s`);
        
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t device timeout:', error);
        showToast('L·ªói khi c·∫≠p nh·∫≠t timeout: ' + error.message, 'error');
    } finally {
        // Restore button
        const updateBtn = document.querySelector('[onclick="updateDeviceTimeout()"]');
        updateBtn.innerHTML = '<i class="fas fa-save"></i> C·∫≠p nh·∫≠t timeout';
        updateBtn.disabled = false;
    }
}

// ƒê·∫£m b·∫£o function accessible globally  
window.updateDeviceTimeout = updateDeviceTimeout;
console.log('üìù updateDeviceTimeout function defined and assigned to window');

/**
 * Validation input timeout real-time
 */
function validateTimeoutInput() {
    const input = document.getElementById('deviceTimeoutInput');
    const value = parseInt(input.value);
    
    if (isNaN(value) || value < 30) {
        input.setCustomValidity('Th·ªùi gian t·ªëi thi·ªÉu l√† 30 gi√¢y');
    } else if (value > 86400) {
        input.setCustomValidity('Th·ªùi gian t·ªëi ƒëa l√† 86400 gi√¢y (24 ti·∫øng)');
    } else {
        input.setCustomValidity('');
    }
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Ch·ªâ ch·∫°y n·∫øu ƒëang ·ªü trang settings (c√≥ element deviceTimeoutInput)
    const timeoutInput = document.getElementById('deviceTimeoutInput');
    if (!timeoutInput) {
        console.log('‚è≠Ô∏è B·ªè qua timeout functions - kh√¥ng ph·∫£i trang settings');
        return;
    }
    
    // Th√™m validation cho input
    timeoutInput.addEventListener('input', validateTimeoutInput);
    timeoutInput.addEventListener('blur', validateTimeoutInput);
    
    console.log('üöÄ Timeout functions initialized - timeout loaded from server');
    console.log('üîß updateDeviceTimeout function available:', typeof window.updateDeviceTimeout);
});

</script> 