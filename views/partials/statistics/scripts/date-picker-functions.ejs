<script>
  // Function to enable/disable correct hidden inputs
  function setupFormInputs(formId, viewType, chartType) {
    const form = document.getElementById(formId);
    if (!form) return;
    
    console.log(`🔧 Setting up form inputs for ${chartType} chart, view type: ${viewType}`);
    
    if (viewType === 'month') {
      // Disable day inputs, enable month inputs
      const dayInputNames = [`from${chartType === 'electric' ? 'Electric' : 'Water'}`, `to${chartType === 'electric' ? 'Electric' : 'Water'}`];
      const monthInputNames = [`fromMonth${chartType === 'electric' ? 'Electric' : 'Water'}`, `toMonth${chartType === 'electric' ? 'Electric' : 'Water'}`];
      
      dayInputNames.forEach(name => {
        const input = form.querySelector(`input[name="${name}"]`);
        if (input) {
          input.disabled = true;
          console.log(`🚫 Disabled day input: ${name}`);
        }
      });
      
      monthInputNames.forEach(name => {
        let input = form.querySelector(`input[name="${name}"]`);
        if (!input) {
          // Create month input if it doesn't exist
          input = document.createElement('input');
          input.type = 'hidden';
          input.name = name;
          input.id = name === `fromMonth${chartType === 'electric' ? 'Electric' : 'Water'}` ? 
                    `from${chartType === 'electric' ? 'Electric' : 'Water'}Hidden` : 
                    `to${chartType === 'electric' ? 'Electric' : 'Water'}Hidden`;
          form.appendChild(input);
          console.log(`➕ Created month input: ${name}`);
        } else {
          input.disabled = false;
          console.log(`✅ Enabled month input: ${name}`);
        }
      });
    } else {
      // Disable month inputs, enable day inputs
      const dayInputNames = [`from${chartType === 'electric' ? 'Electric' : 'Water'}`, `to${chartType === 'electric' ? 'Electric' : 'Water'}`];
      const monthInputNames = [`fromMonth${chartType === 'electric' ? 'Electric' : 'Water'}`, `toMonth${chartType === 'electric' ? 'Electric' : 'Water'}`];
      
      monthInputNames.forEach(name => {
        const input = form.querySelector(`input[name="${name}"]`);
        if (input) {
          input.disabled = true;
          console.log(`🚫 Disabled month input: ${name}`);
        }
      });
      
      dayInputNames.forEach(name => {
        let input = form.querySelector(`input[name="${name}"]`);
        if (!input) {
          // Create day input if it doesn't exist
          input = document.createElement('input');
          input.type = 'hidden';
          input.name = name;
          input.id = name === `from${chartType === 'electric' ? 'Electric' : 'Water'}` ? 
                    `from${chartType === 'electric' ? 'Electric' : 'Water'}DateHidden` : 
                    `to${chartType === 'electric' ? 'Electric' : 'Water'}DateHidden`;
          form.appendChild(input);
          console.log(`➕ Created day input: ${name}`);
        } else {
          input.disabled = false;
          console.log(`✅ Enabled day input: ${name}`);
        }
      });
    }
  }

  // Handler functions cho radio button changes
  window.handleElectricViewChange = function() {
    console.log('⚡ Electric view change triggered');
    
    // Reset prevent flag when user actively changes view type
    if (window.preventAutoSubmit) {
      console.log('🔄 Resetting preventAutoSubmit flag due to user action');
      window.preventAutoSubmit = false;
    }
    
    setTimeout(() => {
      const selectedValue = document.querySelector('input[name="viewTypeElectric"]:checked').value;
      console.log('⚡ Electric view changed to:', selectedValue);
      
      // Setup correct form inputs
      setupFormInputs('electricForm', selectedValue, 'electric');
      
      if (selectedValue === 'month') {
        const last9Months = getLast9Months();
        const fromInput = document.querySelector('input[name="fromMonthElectric"]');
        const toInput = document.querySelector('input[name="toMonthElectric"]');
        
        if (fromInput && toInput) {
          // Always set default values to last 9 months when switching to month view
          fromInput.value = last9Months[0].monthYear;
          toInput.value = last9Months[last9Months.length - 1].monthYear;
          console.log('⚡ Set electric month range to last 9 months:', fromInput.value, 'to', toInput.value);
          
          setTimeout(() => {
            if (pickerRoots.electricRange) {
              pickerRoots.electricRange.unmount();
            }
            pickerRoots.electricRange = createMonthRangePicker('electricRangePicker', 'fromElectricHidden', 'toElectricHidden', () => {
              if (!window.preventAutoSubmit) {
                setTimeout(() => document.getElementById('electricForm').submit(), 100);
              }
            });
            
            // Check global prevent flag to avoid loop
            if (!window.preventAutoSubmit) {
              // Submit form with month parameters after picker is ready
              setTimeout(() => {
                document.getElementById('electricForm').submit();
              }, 150);
            } else {
              console.log('⚡ Skipping auto-submit to avoid loop (preventAutoSubmit flag is set)');
            }
          }, 50);
        }
      } else {
        // Set default date range for day view if empty
        const fromDateInput = document.querySelector('input[name="fromElectric"]');
        const toDateInput = document.querySelector('input[name="toElectric"]');
        
        if (fromDateInput && toDateInput && (!fromDateInput.value || !toDateInput.value)) {
          const today = new Date();
          const last9Days = new Date(today);
          last9Days.setDate(today.getDate() - 8); // 9 ngày: hôm nay + 8 ngày trước
          
          fromDateInput.value = last9Days.toISOString().split('T')[0];
          toDateInput.value = today.toISOString().split('T')[0];
          console.log('⚡ Set default electric date range:', fromDateInput.value, 'to', toDateInput.value);
        }
        
        setTimeout(() => {
          if (pickerRoots.electricDateRange) {
            pickerRoots.electricDateRange.unmount();
          }
          pickerRoots.electricDateRange = createDateRangePicker('electricDateRangePicker', 'fromElectricDateHidden', 'toElectricDateHidden', () => {
            if (!window.preventAutoSubmit) {
              setTimeout(() => document.getElementById('electricForm').submit(), 100);
            }
          });
          
            // Check global prevent flag to avoid loop
            if (!window.preventAutoSubmit) {
              // Submit form with date parameters after picker is ready
              setTimeout(() => {
                document.getElementById('electricForm').submit();
              }, 150);
            } else {
              console.log('⚡ Skipping auto-submit to avoid loop (preventAutoSubmit flag is set)');
            }
        }, 50);
      }
    }, 100);
  };
  
  window.handleWaterViewChange = function() {
    console.log('💧 Water view change triggered');
    
    // Reset prevent flag when user actively changes view type
    if (window.preventAutoSubmit) {
      console.log('🔄 Resetting preventAutoSubmit flag due to user action');
      window.preventAutoSubmit = false;
    }
    
    setTimeout(() => {
      const selectedValue = document.querySelector('input[name="viewTypeWater"]:checked').value;
      console.log('💧 Water view changed to:', selectedValue);
      
      // Setup correct form inputs
      setupFormInputs('waterForm', selectedValue, 'water');
      
      if (selectedValue === 'month') {
        const last9Months = getLast9Months();
        const fromInput = document.querySelector('input[name="fromMonthWater"]');
        const toInput = document.querySelector('input[name="toMonthWater"]');
        
        if (fromInput && toInput) {
          // Always set default values to last 9 months when switching to month view
          fromInput.value = last9Months[0].monthYear;
          toInput.value = last9Months[last9Months.length - 1].monthYear;
          console.log('💧 Set water month range to last 9 months:', fromInput.value, 'to', toInput.value);
          
          setTimeout(() => {
            if (pickerRoots.waterRange) {
              pickerRoots.waterRange.unmount();
            }
            pickerRoots.waterRange = createMonthRangePicker('waterRangePicker', 'fromWaterHidden', 'toWaterHidden', () => {
              if (!window.preventAutoSubmit) {
                setTimeout(() => document.getElementById('waterForm').submit(), 100);
              }
            });
            
            // Check global prevent flag to avoid loop
            if (!window.preventAutoSubmit) {
              // Submit form with month parameters after picker is ready
              setTimeout(() => {
                document.getElementById('waterForm').submit();
              }, 150);
            } else {
              console.log('💧 Skipping auto-submit to avoid loop (preventAutoSubmit flag is set)');
            }
          }, 50);
        }
      } else {
        // Set default date range for day view if empty
        const fromDateInput = document.querySelector('input[name="fromWater"]');
        const toDateInput = document.querySelector('input[name="toWater"]');
        
        if (fromDateInput && toDateInput && (!fromDateInput.value || !toDateInput.value)) {
          const today = new Date();
          const last9Days = new Date(today);
          last9Days.setDate(today.getDate() - 8); // 9 ngày: hôm nay + 8 ngày trước
          
          fromDateInput.value = last9Days.toISOString().split('T')[0];
          toDateInput.value = today.toISOString().split('T')[0];
          console.log('💧 Set default water date range:', fromDateInput.value, 'to', toDateInput.value);
        }
        
        setTimeout(() => {
          if (pickerRoots.waterDateRange) {
            pickerRoots.waterDateRange.unmount();
          }
          pickerRoots.waterDateRange = createDateRangePicker('waterDateRangePicker', 'fromWaterDateHidden', 'toWaterDateHidden', () => {
            if (!window.preventAutoSubmit) {
              setTimeout(() => document.getElementById('waterForm').submit(), 100);
            }
          });
          
            // Check global prevent flag to avoid loop
            if (!window.preventAutoSubmit) {
              // Submit form with date parameters after picker is ready
              setTimeout(() => {
                document.getElementById('waterForm').submit();
              }, 150);
            } else {
              console.log('💧 Skipping auto-submit to avoid loop (preventAutoSubmit flag is set)');
            }
        }, 50);
      }
    }, 100);
  };

  // Function to create Ant Design date range picker
  function createDateRangePicker(containerId, fromHiddenId, toHiddenId, onChange) {
    const container = document.getElementById(containerId);
    const fromHidden = document.getElementById(fromHiddenId);
    const toHidden = document.getElementById(toHiddenId);
    
    if (!container || !fromHidden || !toHidden) {
      console.log(`❌ Container ${containerId} or hidden inputs not found`);
      return;
    }
    
    const root = createRoot(container);
    
    let initialValue = null;
    if (fromHidden.value && toHidden.value) {
      try {
        initialValue = [
          dayjs(fromHidden.value, 'YYYY-MM-DD'),
          dayjs(toHidden.value, 'YYYY-MM-DD')
        ];
      } catch (e) {
        console.log(`⚠️ Invalid date format in ${containerId}`);
      }
    }
    
    const rangePicker = h(ConfigProvider, {
      locale: vietnameseLocale
    }, h(RangePicker, {
      placeholder: ['Từ ngày', 'Đến ngày'],
      format: 'DD/MM/YYYY',
      value: initialValue,
      onChange: (dates, dateStrings) => {
        if (dates && dates.length === 2) {
          fromHidden.value = dates[0].format('YYYY-MM-DD');
          toHidden.value = dates[1].format('YYYY-MM-DD');
        } else {
          fromHidden.value = '';
          toHidden.value = '';
        }
        if (onChange) {
          onChange(dates, dateStrings);
        }
      },
      style: { width: '100%', height: '36px' }
    }));
    
    root.render(rangePicker);
    console.log(`✅ Created date range picker for ${containerId}`);
    
    return root;
  }

  // Function to create Ant Design month range picker
  function createMonthRangePicker(containerId, fromHiddenId, toHiddenId, onChange) {
    const container = document.getElementById(containerId);
    const fromHidden = document.getElementById(fromHiddenId);
    const toHidden = document.getElementById(toHiddenId);
    
    if (!container || !fromHidden || !toHidden) {
      console.log(`❌ Container ${containerId} or hidden inputs not found`);
      return;
    }
    
    const root = createRoot(container);
    
    let initialValue = null;
    if (fromHidden.value && toHidden.value) {
      try {
        initialValue = [
          dayjs(fromHidden.value, 'YYYY-MM'),
          dayjs(toHidden.value, 'YYYY-MM')
        ];
      } catch (e) {
        console.log(`⚠️ Invalid month format in ${containerId}`);
      }
    }
    
    const monthRangePicker = h(ConfigProvider, {
      locale: vietnameseLocale
    }, h(RangePicker, {
      picker: 'month',
      placeholder: ['Từ tháng', 'Đến tháng'],
      format: 'MM/YYYY',
      value: initialValue,
      onChange: (dates, dateStrings) => {
        if (dates && dates.length === 2) {
          fromHidden.value = dates[0].format('YYYY-MM');
          toHidden.value = dates[1].format('YYYY-MM');
        } else {
          fromHidden.value = '';
          toHidden.value = '';
        }
        if (onChange) {
          onChange(dates, dateStrings);
        }
      },
      style: { width: '100%', height: '36px' }
    }));
    
    root.render(monthRangePicker);
    console.log(`✅ Created month range picker for ${containerId}`);
    
    return root;
  }
</script> 