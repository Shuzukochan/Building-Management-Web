<script>
  const waterHistory = JSON.parse('<%- JSON.stringify(waterHistory || {}) %>');
  const electricHistory = JSON.parse('<%- JSON.stringify(electricHistory || {}) %>');

  // Debug logs ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
  console.log('üîç Debug - Raw data from server:');
  console.log('üíß waterHistory:', waterHistory);
  console.log('‚ö° electricHistory:', electricHistory);
  console.log('üìä Server date ranges:');
  console.log('‚ö° Electric range: <%= fromElectric %> to <%= toElectric %>');
  console.log('üíß Water range: <%= fromWater %> to <%= toWater %>');

  // H√†m t·∫°o 9 th√°ng g·∫ßn nh·∫•t
  function getLast9Months() {
    const months = [];
    const today = new Date();
    for (let i = 8; i >= 0; i--) {
      const d = new Date(today);
      d.setMonth(d.getMonth() - i);
      months.push({
        month: d.getMonth() + 1,
        year: d.getFullYear(),
        monthYear: `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`
      });
    }
    return months;
  }

  // Handler functions cho radio button changes - ƒê·ªäNH NGHƒ®A S·ªöM TR∆Ø·ªöC KHI HTML S·ª¨ D·ª§NG
  window.handleElectricViewChange = function() {
    console.log('‚ö° Electric view change triggered');
    
    // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ update
    setTimeout(() => {
      const selectedValue = document.querySelector('input[name="viewTypeElectric"]:checked').value;
      console.log('‚ö° Electric view changed to:', selectedValue);
      
      if (selectedValue === 'month') {
        // Set ngay l·∫≠p t·ª©c gi√° tr·ªã 9 th√°ng g·∫ßn nh·∫•t
        const last9Months = getLast9Months();
        const fromInput = document.getElementById('fromElectricHidden');
        const toInput = document.getElementById('toElectricHidden');
        
        console.log('üîç Found month hidden inputs:', fromInput, toInput);
        
        if (fromInput && toInput) {
          fromInput.value = last9Months[0].monthYear;
          toInput.value = last9Months[last9Months.length - 1].monthYear;
          
          console.log('üìÖ Set electric month range:', fromInput.value, 'to', toInput.value);
          
          // Recreate month range picker
          setTimeout(() => {
            if (pickerRoots.electricRange) {
              pickerRoots.electricRange.unmount();
            }
            
            pickerRoots.electricRange = createMonthRangePicker('electricRangePicker', 'fromElectricHidden', 'toElectricHidden', () => {
              setTimeout(() => document.getElementById('electricForm').submit(), 100);
            });
          }, 50);
        } else {
          console.log('‚ùå Month hidden inputs not found!');
        }
      } else {
        // Day mode - recreate date range picker if needed
        setTimeout(() => {
          if (pickerRoots.electricDateRange) {
            pickerRoots.electricDateRange.unmount();
          }
          
          pickerRoots.electricDateRange = createDateRangePicker('electricDateRangePicker', 'fromElectricDateHidden', 'toElectricDateHidden', () => {
            setTimeout(() => document.getElementById('electricForm').submit(), 100);
          });
        }, 50);
      }
      
      // Submit form sau khi set gi√° tr·ªã v√† recreate pickers
      setTimeout(() => {
        document.getElementById('electricForm').submit();
      }, 200);
    }, 100);
  };
  
  window.handleWaterViewChange = function() {
    console.log('üíß Water view change triggered');
    
    // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ update
    setTimeout(() => {
      const selectedValue = document.querySelector('input[name="viewTypeWater"]:checked').value;
      console.log('üíß Water view changed to:', selectedValue);
      
      if (selectedValue === 'month') {
        // Set ngay l·∫≠p t·ª©c gi√° tr·ªã 9 th√°ng g·∫ßn nh·∫•t
        const last9Months = getLast9Months();
        const fromInput = document.getElementById('fromWaterHidden');
        const toInput = document.getElementById('toWaterHidden');
        
        console.log('üîç Found month hidden inputs:', fromInput, toInput);
        
        if (fromInput && toInput) {
          fromInput.value = last9Months[0].monthYear;
          toInput.value = last9Months[last9Months.length - 1].monthYear;
          
          console.log('üìÖ Set water month range:', fromInput.value, 'to', toInput.value);
          
          // Recreate month range picker
          setTimeout(() => {
            if (pickerRoots.waterRange) {
              pickerRoots.waterRange.unmount();
            }
            
            pickerRoots.waterRange = createMonthRangePicker('waterRangePicker', 'fromWaterHidden', 'toWaterHidden', () => {
              setTimeout(() => document.getElementById('waterForm').submit(), 100);
            });
          }, 50);
        } else {
          console.log('‚ùå Month hidden inputs not found!');
        }
      } else {
        // Day mode - recreate date range picker if needed
        setTimeout(() => {
          if (pickerRoots.waterDateRange) {
            pickerRoots.waterDateRange.unmount();
          }
          
          pickerRoots.waterDateRange = createDateRangePicker('waterDateRangePicker', 'fromWaterDateHidden', 'toWaterDateHidden', () => {
            setTimeout(() => document.getElementById('waterForm').submit(), 100);
          });
        }, 50);
      }
      
      // Submit form sau khi set gi√° tr·ªã v√† recreate pickers
      setTimeout(() => {
        document.getElementById('waterForm').submit();
      }, 200);
    }, 100);
  };

  // Set Vietnamese locale for browser
  document.documentElement.lang = 'vi';
  
  // Set Vietnamese locale for dayjs FIRST
  dayjs.locale('vi');
  
  // Configure Ant Design locale
  const { ConfigProvider, DatePicker } = antd;
  const { RangePicker } = DatePicker;
  const { createElement: h } = React;
  const { createRoot } = ReactDOM;
  
  // Vietnamese locale for Ant Design
  const vietnameseLocale = {
    "locale": "vi_VN",
    "Pagination": {
      "items_per_page": "/ trang",
      "jump_to": "ƒê·∫øn",
      "jump_to_confirm": "x√°c nh·∫≠n",
      "page": "",
      "prev_page": "Trang Tr∆∞·ªõc",
      "next_page": "Trang K·∫ø",
      "prev_5": "V·ªÅ 5 Trang Tr∆∞·ªõc",
      "next_5": "ƒê·∫øn 5 Trang K·∫ø",
      "prev_3": "V·ªÅ 3 Trang Tr∆∞·ªõc",
      "next_3": "ƒê·∫øn 3 Trang K·∫ø"
    },
    "DatePicker": {
      "lang": {
        "placeholder": "Ch·ªçn th·ªùi ƒëi·ªÉm",
        "rangePlaceholder": ["T·ª´ th√°ng", "ƒê·∫øn th√°ng"],
        "locale": "vi_VN",
        "today": "H√¥m nay",
        "now": "B√¢y gi·ªù",
        "backToToday": "V·ªÅ h√¥m nay",
        "ok": "Ok",
        "clear": "X√≥a",
        "month": "Th√°ng",
        "year": "NƒÉm",
        "timeSelect": "Ch·ªçn th·ªùi gian",
        "dateSelect": "Ch·ªçn ng√†y",
        "weekSelect": "Ch·ªçn tu·∫ßn",
        "monthSelect": "Ch·ªçn th√°ng",
        "yearSelect": "Ch·ªçn nƒÉm",
        "decadeSelect": "Ch·ªçn th·∫≠p k·ª∑",
        "yearFormat": "YYYY",
        "dateFormat": "D/M/YYYY",
        "dayFormat": "D",
        "dateTimeFormat": "D/M/YYYY HH:mm:ss",
        "monthBeforeYear": true,
        "previousMonth": "Th√°ng tr∆∞·ªõc (PageUp)",
        "nextMonth": "Th√°ng sau (PageDown)",
        "previousYear": "NƒÉm tr∆∞·ªõc (Control + left)",
        "nextYear": "NƒÉm sau (Control + right)",
        "previousDecade": "Th·∫≠p k·ª∑ tr∆∞·ªõc",
        "nextDecade": "Th·∫≠p k·ª∑ sau",
        "previousCentury": "Th·∫ø k·ª∑ tr∆∞·ªõc",
        "nextCentury": "Th·∫ø k·ª∑ sau",
        "shortWeekDays": ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        "shortMonths": ["Th1", "Th2", "Th3", "Th4", "Th5", "Th6", "Th7", "Th8", "Th9", "Th10", "Th11", "Th12"]
      },
      "timePickerLocale": {
        "placeholder": "Ch·ªçn th·ªùi gian"
      }
    },
    "TimePicker": {
      "placeholder": "Ch·ªçn th·ªùi gian"
    },
    "Calendar": {
      "lang": {
        "placeholder": "Ch·ªçn th·ªùi ƒëi·ªÉm",
        "rangePlaceholder": ["T·ª´ th√°ng", "ƒê·∫øn th√°ng"],
        "locale": "vi_VN",
        "today": "H√¥m nay",
        "now": "B√¢y gi·ªù",
        "backToToday": "V·ªÅ h√¥m nay",
        "ok": "Ok",
        "clear": "X√≥a",
        "month": "Th√°ng",
        "year": "NƒÉm",
        "timeSelect": "Ch·ªçn th·ªùi gian",
        "dateSelect": "Ch·ªçn ng√†y",
        "weekSelect": "Ch·ªçn tu·∫ßn",
        "monthSelect": "Ch·ªçn th√°ng",
        "yearSelect": "Ch·ªçn nƒÉm",
        "decadeSelect": "Ch·ªçn th·∫≠p k·ª∑",
        "yearFormat": "YYYY",
        "dateFormat": "D/M/YYYY",
        "dayFormat": "D",
        "dateTimeFormat": "D/M/YYYY HH:mm:ss",
        "monthBeforeYear": true,
        "previousMonth": "Th√°ng tr∆∞·ªõc (PageUp)",
        "nextMonth": "Th√°ng sau (PageDown)",
        "previousYear": "NƒÉm tr∆∞·ªõc (Control + left)",
        "nextYear": "NƒÉm sau (Control + right)",
        "previousDecade": "Th·∫≠p k·ª∑ tr∆∞·ªõc",
        "nextDecade": "Th·∫≠p k·ª∑ sau",
        "previousCentury": "Th·∫ø k·ª∑ tr∆∞·ªõc",
        "nextCentury": "Th·∫ø k·ª∑ sau",
        "shortWeekDays": ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        "shortMonths": ["Th1", "Th2", "Th3", "Th4", "Th5", "Th6", "Th7", "Th8", "Th9", "Th10", "Th11", "Th12"]
      },
      "timePickerLocale": {
        "placeholder": "Ch·ªçn th·ªùi gian"
      }
    }
  };
</script> 